using System;
using System.IO;
using System.Reflection;

namespace AutoSql.Helpers
{
    /// <summary>
    /// Helper class for exporting files.
    /// </summary>
    public class ExportFileHelper
    {
        /// <summary>
        /// Generates a file path with a formatted file name.
        /// </summary>
        /// <param name="outputPath">The directory where the file will be saved.</param>
        /// <returns>The full file path including the formatted file name.</returns>
        public string GetFilePath(string outputPath)
        {
            string fileNameFormatted = $"updateFile.{Environment.UserName}.{DateTime.Now:yyyy.MM.dd.HH.mm.ss}.sql";
            return Path.Combine(outputPath, fileNameFormatted);
        }

        /// <summary>
        /// Creates a directory if it does not already exist.
        /// </summary>
        /// <param name="path">The path of the directory to create.</param>
        public void CreateDirectory(string path)
        {
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
        }

        /// <summary>
        /// Checks if a directory exists.
        /// </summary>
        /// <param name="path">The path of the directory to check.</param>
        /// <returns>True if the directory exists, otherwise false.</returns>
        public bool DirectoryExists(string path)
        {
            return Directory.Exists(path);
        }

        /// <summary>
        /// Writes content to a file with a header.
        /// </summary>
        /// <param name="filePath">The path of the file to write to.</param>
        /// <param name="content">The content to write to the file.</param>
        public void WriteToFile(string filePath, string content)
        {
            string header = GenerateFileHeader();
            File.WriteAllText(filePath, header + content);
        }

        /// <summary>
        /// Generates a header for the export file.
        /// </summary>
        /// <returns>The generated header string.</returns>
        public static string GenerateFileHeader()
        {
            string appVersion = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version;
            return $@"
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
-- This file was generated by AutoSql v.{appVersion} at {DateTime.Now}
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
";
        }
    }
}
